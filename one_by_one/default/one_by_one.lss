
one_by_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000246  00000000  00000000  00000153  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000da  00000000  00000000  00000399  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ec  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000be  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
DDRC=0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
while(1)
{
PORTC=0b00000001;
  70:	b1 e0       	ldi	r27, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  72:	20 e5       	ldi	r18, 0x50	; 80
  74:	33 ec       	ldi	r19, 0xC3	; 195
_delay_ms(200);
PORTC=0b00000010;
  76:	a2 e0       	ldi	r26, 0x02	; 2
_delay_ms(200);
PORTC=0b00000100;
  78:	f4 e0       	ldi	r31, 0x04	; 4
_delay_ms(200);
PORTC=0b00001000;
  7a:	e8 e0       	ldi	r30, 0x08	; 8
_delay_ms(200);
PORTC=0b00010000;
  7c:	70 e1       	ldi	r23, 0x10	; 16
_delay_ms(200);
PORTC=0b00100000;
  7e:	60 e2       	ldi	r22, 0x20	; 32
_delay_ms(200);
PORTC=0b01000000;
  80:	50 e4       	ldi	r21, 0x40	; 64
_delay_ms(200);
PORTC=0b10000000;
  82:	40 e8       	ldi	r20, 0x80	; 128
int main()
{
DDRC=0b11111111;
while(1)
{
PORTC=0b00000001;
  84:	b5 bb       	out	0x15, r27	; 21
  86:	c9 01       	movw	r24, r18
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
_delay_ms(200);
PORTC=0b00000010;
  8c:	a5 bb       	out	0x15, r26	; 21
  8e:	c9 01       	movw	r24, r18
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
_delay_ms(200);
PORTC=0b00000100;
  94:	f5 bb       	out	0x15, r31	; 21
  96:	c9 01       	movw	r24, r18
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
_delay_ms(200);
PORTC=0b00001000;
  9c:	e5 bb       	out	0x15, r30	; 21
  9e:	c9 01       	movw	r24, r18
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
_delay_ms(200);
PORTC=0b00010000;
  a4:	75 bb       	out	0x15, r23	; 21
  a6:	c9 01       	movw	r24, r18
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x3c>
_delay_ms(200);
PORTC=0b00100000;
  ac:	65 bb       	out	0x15, r22	; 21
  ae:	c9 01       	movw	r24, r18
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
_delay_ms(200);
PORTC=0b01000000;
  b4:	55 bb       	out	0x15, r21	; 21
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
_delay_ms(200);
PORTC=0b10000000;
  bc:	45 bb       	out	0x15, r20	; 21
  be:	e2 cf       	rjmp	.-60     	; 0x84 <main+0x18>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
